# Interpreter for shell commands.
set shell sh

# set '-eu' options for shell commands.
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at times.
set shellopts '-eu'

# Set internal field separator (IFS) to "\n" for shell commands.
# This is useful to automatically split file names in $fs and $fx properly since
# default file separator used in these variables (i.e. 'filesep' option) is
# newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# Leave some space at the top and the bottom of the screen.
set scrolloff 10

# Show icons if possible.
# set icons
# Show box margin.
set drawbox
# No preview.
set nopreview
set info size:time

# Toggle hidden files.
map . set hidden!

# Use enter for shell commands.
map <enter> shell

# Execute current file (must be executable).
map x $$f
map X !$f

# Disable right parent dir panel.
set ratios 1

# Dedicated keys for file opener actions.
map o &xdg-open $f
map O $mimeopen --ask $f

# Define a custom 'open' command.
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# Make sure trash folder exists
# %mkdir -p ~/.trash

# Move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options).
cmd trash %set -f; mv $fx ~/.trash

# Define a custom 'delete' command.
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# Use '<delete>' key for either 'trash' or 'delete' command.
# map <delete> trash
# map <delete> delete

# Extract the current file with the right command.
# (xkcd link: https://xkcd.com/1168/).
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# Compress current file or selected files with tar and gunzip.
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# Compress current file or selected files with zip.
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# ===================================================================
# == User settings
# ===================================================================

# Example to remove a map group started with `d`.
# map d

cmd copy-clipboard ${{
    set -f
    target=$(basename "${fx}")
    if [ "$#" -eq 1 ]; then
        target="${fx}"
    fi
    cpy_cmd="wl-copy"
    [ "$XDG_SESSION_TYPE" = "x11" ] && cpy_cmd="xclip -selection c"
    printf '%s' "${target}" | eval "${cpy_cmd}"
}}

# Create a directory.
map + push %mkdir<space>-p<space>

# Delete m mapping.
map m

cmd run ${{
    set -f
    $1 $fx $2
}}

map md run mv $$HOME/Documents
# map Yd run cp $$HOME/Documents
map <a-w> copy-clipboard
map <c-w> copy-clipboard --all

# File actions.
map D delete

# Refresh.
map <c-c> reload

# Fuzzy search.
map ,
# Same as vim mapping.

cmd fzf-jump ${{
    set -f
    res="$(fzf --height 100% || printf '')"
    test -z $res && return
    lf -remote "send $id select \"$res\""
}}
map <c-t> fzf-jump

cmd fzf-projects ${{
    set -f
    FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} --height 100% --reverse"
    res="$(zsh -c 'source $HOME/.fzf-projects.zsh && fzf-projects --print || echo -n')"
    [ -n $res ] && lf -remote "send $id cd \"$res\""
}}
map <c-g> fzf-projects
